package employee_app;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import employee_app.Employee;
import employee_app.EmployeeRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
@CrossOrigin(origins = "http://localhost:4200")
public class EmployeeRecordsController {
	@Autowired // This means to get the bean called employeeRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private EmployeeRepository employeeRepository;
	
	@GetMapping(path="/employee")
	public @ResponseBody Iterable<Employee> getAllEmployees() {
		// This returns a JSON or XML with the users
		return employeeRepository.findAll();
	}
	
	@GetMapping(path="/employee/{eid}")
	public @ResponseBody Optional<Employee> getEmployeeById(@PathVariable("eid") int eid) {
		return employeeRepository.findById(eid);
	}
	
	@PostMapping(path="/employee")
	public @ResponseBody Employee addEmployee (@RequestBody Employee employee) {
		Employee addedEmployee = employeeRepository.save(employee);
		return addedEmployee;
	}
	
	@PostMapping(path="/employee/{eid}")
	public ResponseEntity<Employee> updateEmployeeById (
			@PathVariable("eid") int eid,
			@RequestBody Employee updatedEmployee) {
		employeeRepository.save(updatedEmployee);
		return new ResponseEntity<Employee>(updatedEmployee, HttpStatus.OK);
	}
	
	@DeleteMapping(path="/employee/{eid}")
	public ResponseEntity<Void> deleteEmployee(@PathVariable int eid) {
		employeeRepository.deleteById(eid);
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}
}